  public void partTwo(){
        List<String> startingKeys = new ArrayList<>();
        nodes.forEach((k,v) -> { if (k.endsWith("A")) { startingKeys.add(k); } });
        int total = 0;
        boolean done = false;
        for (String key : startingKeys){
            mapKey = key;
            while (!done) {
                if (mapKey.endsWith("Z")) { done = true; }
                total += runInstructions();
            }
            System.out.println(total);
        }

        System.out.println(total);
    }
//    private void partTwo() {
//        List<String> startingKeys = new ArrayList<>();
//        nodes.forEach((k,v) -> { if (k.endsWith("A")) { startingKeys.add(k); } });
//        System.out.println(getSteps("11A"));
//        List<Long> steps = startingKeys.stream().map(this::getSteps).toList();
//        long lcm = calculateLCM(steps);
//        System.out.println(lcm);
//    }
    public long getSteps(String key){
        long steps = 0L;
        int counter = 0;
        while (!key.endsWith("Z")){
            char instruction = instructions[counter % instructions.length];
            key = getNextMapKey(key,instruction);
            if (key.endsWith("Z")) break;
            steps++;
        }
        return steps;
    }
private List<Long> runModded() {
    long steps = 0L;
    boolean allKeysEndedWithZ = false;
    while (!allKeysEndedWithZ) {
        allKeysEndedWithZ = true;
        for (String startingKey : nodes.keySet()) {
            if (startingKey.endsWith("A")) {
                String currentKey = startingKey;
                int i = 0;
                while (true) {
                    char instruction = instructions[i % instructions.length];
                    currentKey = getNextMapKey(currentKey, instruction);
                    if (currentKey.endsWith("Z")) {
                        allKeysEndedWithZ &= currentKey.equals(nodes.get(startingKey).left()) || currentKey.equals(nodes.get(startingKey).right());
                        break;
                    }
                    i++;
                }
            }
        }
        if (!allKeysEndedWithZ) { steps++;}
    }
    return List.of(steps, 1L);
}
    private long calculateLCM(List<Long> numbers) {
        long lcm = numbers.get(0);
        for (long number : numbers) {
            lcm = lcm * number / gcd(lcm, number);
        }
        return lcm;
    }
    private long gcd(long a, long b) {
        while (b > 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }



